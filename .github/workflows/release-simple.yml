name: Build and Release Package (Simple)

on:
    push:
        tags:
            - "v*" # Triggers on v1.0.0, v1.0.1, etc.

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3

            - name: Get version from tag
              id: version
              run: |
                  echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
                  echo "PACKAGE_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_OUTPUT

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "22"

            - name: Checkout parent repository for workspace
              uses: actions/checkout@v3
              with:
                  repository: ${{ github.repository_owner }}/basecamp-dev
                  path: workspace-root
                  token: ${{ secrets.POLARIS_PLUGIN_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}

            - name: Setup workspace and install dependencies
              run: |
                  # Copy this package into the workspace structure
                  mkdir -p workspace-root/npm_packages
                  # Use rsync to exclude the workspace-root directory itself
                  rsync -av --exclude='workspace-root' --exclude='.git' . workspace-root/npm_packages/${{ steps.version.outputs.PACKAGE_NAME }}/
                  
                  # Navigate to workspace root
                  cd workspace-root
                  
                  # Install all dependencies (respects workspace)
                  npm ci

            - name: Build package
              run: |
                  cd workspace-root/npm_packages/${{ steps.version.outputs.PACKAGE_NAME }}
                  npm run build

            - name: Create distribution package
              run: |
                  # Work from the package directory
                  cd workspace-root/npm_packages/${{ steps.version.outputs.PACKAGE_NAME }}
                  
                  # Create dist directory
                  mkdir -p dist
                  
                  # Copy built files
                  cp -r build dist/
                  cp -r src dist/  # Include source for debugging
                  cp package.json dist/
                  cp README.md dist/ || true
                  
                  # Update package.json for production use
                  cd dist
                  node -e "
                  const fs = require('fs');
                  const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
                  
                  // Update main to point to built file
                  if (pkg.main && pkg.main.includes('src/')) {
                    pkg.main = pkg.main.replace('src/', 'build/');
                  }
                  
                  // Ensure version matches tag
                  pkg.version = '${{ steps.version.outputs.VERSION }}';
                  
                  // Add dist tag
                  pkg._dist = true;
                  
                  fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
                  "
                  
                  # Create zip
                  cd ..
                  zip -r ${{ steps.version.outputs.PACKAGE_NAME }}-${{ steps.version.outputs.VERSION }}.zip dist

            - name: Create Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  gh release create "${{ github.ref_name }}" \
                    --title "Release ${{ github.ref_name }}" \
                    --notes "## ${{ steps.version.outputs.PACKAGE_NAME }} v${{ steps.version.outputs.VERSION }}

                      ### Installation

                      Download and extract the zip file, then reference it in your project:

                      \`\`\`json
                      \"@builtnorth/${{ steps.version.outputs.PACKAGE_NAME }}\": \"github:builtnorth/${{ steps.version.outputs.PACKAGE_NAME }}#${{ github.ref_name }}\"
                      \`\`\`

                      ### What's included
                      - Compiled JavaScript (build/)
                      - Source files (src/)
                      - Package metadata

                      ### Usage
                      This release contains pre-built assets ready for production use." \
                    ./${{ steps.version.outputs.PACKAGE_NAME }}-${{ steps.version.outputs.VERSION }}.zip