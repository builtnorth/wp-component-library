import { useState } from '@wordpress/element';
import { 
    Button,
    Modal,
    TextareaControl,
    Flex,
    FlexBlock,
    FlexItem,
    Notice
} from '@wordpress/components';
import { aiSparkle } from '../utils/icons';
import { useAI } from '../hooks/useAI';

/**
 * AIModal Component - Modal interface for AI generation
 */
export function AIModal({ 
    type, 
    value, 
    onChange, 
    context,
    triggerText = 'Generate with AI',
    modalTitle = 'AI Content Generator',
    validation = {},
    aiOptions = {}
}) {
    const [isOpen, setIsOpen] = useState(false);
    const [customPrompt, setCustomPrompt] = useState('');
    const [preview, setPreview] = useState(value);
    
    const { generate, isGenerating, error, lastProvider, history, undo, canUndo } = useAI(type, {
        initialValue: value,
        onChange: setPreview,
        context,
        validation,
        ...aiOptions
    });
    
    const handleGenerate = async () => {
        try {
            const result = await generate({
                ...context,
                customPrompt: customPrompt || undefined
            });
            setPreview(result);
        } catch (err) {
            console.error('Generation failed:', err);
        }
    };
    
    const handleSave = () => {
        onChange(preview);
        setIsOpen(false);
        setCustomPrompt('');
    };
    
    const handleCancel = () => {
        setIsOpen(false);
        setPreview(value);
        setCustomPrompt('');
    };
    
    const handleUndo = () => {
        if (canUndo) {
            undo();
        }
    };
    
    return (
        <>
            <Button
                icon={aiSparkle}
                onClick={() => setIsOpen(true)}
                variant="secondary"
            >
                {triggerText}
            </Button>
            
            {isOpen && (
                <Modal
                    title={modalTitle}
                    onRequestClose={handleCancel}
                    className="ai-modal"
                    style={{ maxWidth: '600px' }}
                >
                    <div style={{ padding: '20px' }}>
                        {/* Custom prompt input */}
                        <TextareaControl
                            label="Custom Instructions (optional)"
                            help="Provide specific instructions for the AI"
                            value={customPrompt}
                            onChange={setCustomPrompt}
                            rows={3}
                            placeholder="e.g., Write in a professional tone, include specific keywords..."
                        />
                        
                        {/* Preview */}
                        <TextareaControl
                            label="Generated Content"
                            value={preview}
                            onChange={setPreview}
                            rows={8}
                            help={lastProvider ? `Generated by ${lastProvider}` : ''}
                        />
                        
                        {/* Error display */}
                        {error && (
                            <Notice status="error" isDismissible={false}>
                                {error}
                            </Notice>
                        )}
                        
                        {/* Action buttons */}
                        <Flex justify="space-between" align="center" style={{ marginTop: '20px' }}>
                            <FlexItem>
                                <Flex gap={2}>
                                    <Button
                                        variant="primary"
                                        onClick={handleGenerate}
                                        isBusy={isGenerating}
                                        disabled={isGenerating}
                                        icon={aiSparkle}
                                    >
                                        Generate
                                    </Button>
                                    {canUndo && (
                                        <Button
                                            variant="secondary"
                                            onClick={handleUndo}
                                            disabled={isGenerating}
                                        >
                                            Undo
                                        </Button>
                                    )}
                                </Flex>
                            </FlexItem>
                            <FlexItem>
                                <Flex gap={2}>
                                    <Button
                                        variant="tertiary"
                                        onClick={handleCancel}
                                        disabled={isGenerating}
                                    >
                                        Cancel
                                    </Button>
                                    <Button
                                        variant="primary"
                                        onClick={handleSave}
                                        disabled={isGenerating}
                                    >
                                        Save
                                    </Button>
                                </Flex>
                            </FlexItem>
                        </Flex>
                        
                        {/* History indicator */}
                        {history.length > 0 && (
                            <div style={{ marginTop: '10px', fontSize: '12px', opacity: 0.7 }}>
                                History: {history.length} previous generation{history.length !== 1 ? 's' : ''}
                            </div>
                        )}
                    </div>
                </Modal>
            )}
        </>
    );
}